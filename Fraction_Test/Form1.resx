<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        nPCVlpf/bHSI/2B6q/9/n9j/Zo/S/2yU1/9ileP/YI7X/1qK0v9qltv/dJbR/111ov9RcKL/Rm6t/154
        pv+Gh4j/n5+g/7q6u/1kZGX7m5ub9OLi4mv4+PgW////AAAAAAAAAAAAAAAAAAAAAAA6OjoA+Pj4LbS0
        tOpPT0/9hoeI9paXmf9ccpv/ZH6s/4eWtv9jdpz/UFx7/2SU3f9/jq3/e36N/3OOwP9ei9X/hIqb/4yQ
        mP9sgKT/hIyd/6ioqv+pqav0eXl68Ghoaf7Ozs6/9vb2D////wAGBgYAAAAAAAAAAAAAAAAAAAAAADo6
        OgD39/dchoaG+YeHiOiioqPvlZSW34mMkf6bnqH/jZOg/5ifr/+SkpP/a5PT/5qhsf+5uLf/hpnC/16C
        wv+PkJP/n6Ch/6GipP+foKL/n6Ch/6GipPyDg4XxR0dI6Ht7e/vY2Nie/v7+BAAAAAAAAAAAAAAAAAAA
        AAAAAAAAOjo6APf391yFhYX5UVFS5kVFRvaIiIr2nJye/5qbnf+Jjpr/jZi1/6qwvv9omOH/l6bE/8LF
        yf9pjMn/aYKx/5ydn/+hoqT/oKGi/5+gov+kpaf+o6Sl/JKSlP+Dg4PzRERE7crKytr+/v4IAAAAAAAA
        AAAAAAAAAAAAAAAAAAA6OjoA9/f3SJ6envQ8PD33kZKU8pucnf+cnZ//n6Ch/4+TnP9zk9L/WIfT/2mf
        8P9fkd//THa9/1F5vP97hJr/np+h/6Slp/+lpqf/paao/6ChovxxcXLtMjIz9FxcXP6JiYn909PTv/7+
        /gYAAAAAAAAAAAAAAAAAAAAAAAAAACgoKAD9/f0KycnJ201NTupkZWb2f4CB9KGio/+ioqT/jI2Q/36L
        p/9uibz/aZrk/2OHw/9tfqP/e36H/4eIi/+jo6X/pqeo/6mqrP+ztLb+s7O1/Kipq/yCg4TqRkZH7rOz
        s/X19fVI////AAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoAPv7+wzHx8fcOzs79oGCg/yampz9pKWn/qOk
        pv+ioqT/goSK/3KErP9kk9//ZpLY/2qEuP9ieab+jo+S/5ucnv+lpqf/r6+x+4SEhe1zc3TbeHh56ISF
        hvx5eXrzenp6/fPz827///8AAAAAAAAAAAAAAAAAAAAAAAAAAAA6OjoA9/f3VJOTk/hlZmb2aGlq7VdY
        WP5hYmL2mpqb+6enqPmUlZf0fYqp4nqe4fxileP+U36/6llgcfCampz+n6Ci/6Slp/+trrD+kJCS8EFB
        Qeytra3+lpaW/nd3d/yOjo769PT0Z////wAAAAAAAAAAAAAAAAAAAAAAAAAAADo6OgD39/dchYWF+FZW
        V9NeXl77ubm5552dnfRiYmP9T09P4VtbW/xRUlT0UWeP6UVll+BSVl77b29v/V1dX/WOjpDynJ2e+p6f
        of6hoqT+X2Bg9KWlpfv29vaS8/Pzb/T09Gf5+fkL9fX1AAAAAAAAAAAAAAAAAAAAAAAAAAAAOjo6APf3
        90qsrKzxlZWV+K6uru/19fVL9PT0S9TU1LXQ0NDH0dHRx8bGxtKZmZr4lZWV+Le3t93U1NSjnJyc93R0
        dPxWVlbyampr75GSlPd2d3jPm5ub9vf390D///8A////APX19QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAoKCgA+/v7BPf39z339/dH9/f3PPv7+wT///8A////Bf///wb///8G+fn5FPf390b39/dH9/f3KPn5
        +Qv29vZG3d3dkcfHx8uTk5P5TU1N+lFQUeyfn5/39/f3Pzo6OgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAoKCgAOjo6ADo6OgA6OjoAKCgoAAAAAAAAAAAAAAAAAAYGBgA4ODgAOjo6ADo6
        OgA5OTkANTU1AP///wD///8D+Pj4FeTk5GW5ubnutbW19NHR0Z74+PgOODg4AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgBFRUUA+/v7A/j4+Bz39/ce+Pj4C////wAGBgYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////8H///4Af//8AB//+AAP//gAD//4AA//+AAP//gAD//8AA//+A
        Af/+AAD/+AAAf/AAAB/wAAAP4AAAB+AAAAPgAAAD4AAAA+AAAAfgAAAP4AAAB+AAAAfgAAAH4AAAD+AA
        AA/gAAAP4AAAD+AAAH/ggAB////Af///8P8=
</value>
  </data>
</root>